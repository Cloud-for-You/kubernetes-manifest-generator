apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-server-styles
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
data:
  haproxy.cfg: |
    frontend styles
      bind :8080
      acl styles path /
      use_backend styles if styles

    backend styles
      mode http
      errorfile 503 /tmp/page.txt
  # Replace ${CLUSTER} with cluster name
  # Replace ${UICOLOR} with     : LAB: #ff647e,     TEST: #248037,   PRED: #c08c00,   PROD: #982c2c
  # Replace ${UICOLOR_RGB} with : LAB: 255,100,126; TEST: 36,128,55; PRED: 192,128,0; PROD:152,44,44
  page.txt: |
    HTTP/1.0 200 Found
    Cache-Control: no-cache
    Connection: close
    Content-Type: text/css

    .sidebar {
      background: linear-gradient(to bottom, ${UICOLOR}, #30303d, #30303d, #30303d); /* PER-CLUSTER: first color */
    }

    .sidebar:not(.sidebar--collapsed) .sidebar__logo {
      text-indent: -9999px;
    }

    .sidebar:not(.sidebar--collapsed) .sidebar__logo:after {
      text-indent: 0;
      content: "Cluster: ${CLUSTER}"; /* PER-CLUSTER: cluster name */
    }

    .sidebar:not(.sidebar--collapsed) .sidebar__logo img {
      width: 0px;
    }

    .sidebar:not(.sidebar--collapsed) .sidebar__version:before {
      display: block;
      content: "Argo CD SYS";
    }

    .ui-banner {
      background-color: ${UICOLOR}; /* PER-CLUSTER: color */
    }

    .login__text {
      visibility: hidden;
      white-space: pre;
    }

    .login__text:after {
      background: linear-gradient(to left, rgba(${UICOLOR_RGB},0), rgba(${UICOLOR_RGB},0.5), rgba(${UICOLOR_RGB},0.5), rgba(${UICOLOR_RGB},0.5), rgba(${UICOLOR_RGB},0)); /* PER-CLUSTER: all colors */
      display: block;
      visibility: visible;
      content: "Cluster: ${CLUSTER} - ArgoCD: SYS"; /* PER-CLUSTER: cluster name */
      height: 100px;
      padding: 20px 0 0 0;
    }
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: argocd-server-styles
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
automountServiceAccountToken: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server-styles
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server-styles
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-server-styles
        app.kubernetes.io/instance: argocd-deployment-sys
    spec:
      automountServiceAccountToken: false
      serviceAccountName: argocd-server-styles
      containers:
      - image: haproxy
        imagePullPolicy: IfNotPresent
        name: haproxy
        resources:
          requests:
            cpu: 250m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
        - mountPath: /usr/local/etc/haproxy/haproxy.cfg
          name: config
          subPath: haproxy.cfg
        - mountPath: /tmp/page.txt
          name: config
          subPath: page.txt
      volumes:
      - configMap:
          defaultMode: 420
          name: argocd-server-styles
        name: config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-argocd-application-controller
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
  name: argocd-server-styles
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
  type: ClusterIP
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: argocd-server-styles
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
    ingress-router: default
spec:
  host: argocd-sys-styles.apps.<CLUSTER>.<DOMAIN> # PER-CLUSTER: cluster address
  to:
    kind: Service
    name: argocd-server-styles
    weight: 100
  port:
    targetPort: 8080
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
kind: PodDisruptionBudget
apiVersion: policy/v1
metadata:
  name: argocd-server-styles
  labels:
    app.kubernetes.io/name: argocd-server-styles
    app.kubernetes.io/instance: argocd-deployment-sys
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server-styles
